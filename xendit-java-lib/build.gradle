plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'maven-publish'
    id 'com.jfrog.bintray'
    id "com.diffplug.gradle.spotless" version "3.27.1"
}

group 'com.xendit'
version '1.22.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.projectlombok:lombok:1.18.8'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore
    implementation 'org.apache.httpcomponents:httpcore:4.4.11'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'


    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.powermock:powermock-api-mockito2:2.0.2'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:2.0.2'
    testCompile 'org.powermock:powermock-module-junit4-rule:2.0.2'
    testCompile 'org.powermock:powermock-module-junit4:2.0.2'
    testImplementation group: "org.mockito", name: "mockito-core", version:"3.1.0"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
    archives packageJavadoc
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId this.group
            artifactId artifact

            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            pom {
                name = libraryName
                description = libraryDescription
                url = siteUrl
                licenses {
                    license {
                        name = licenseName
                        url = licenseUrl
                    }
                }
                developers {
                    developer {
                        id = developerId
                        name = developerName
                        email = developerEmail
                    }
                }
                scm {
                    connection = gitUrl
                    developerConnection = gitUrl
                    url = siteUrl
                }
            }
        }
    }
}

def bintrayUser = System.getenv('BINTRAY_USER')
def bintrayAPIKey = System.getenv('BINTRAY_API_KEY')
def bintrayGPGPassword = System.getenv('BINTRAY_GPG_PASSWORD')

String ossrhUser = System.getenv('OSSRH_USERNAME')
String ossrhPassword = System.getenv('OSSRH_PASSWORD')

signing {
    sign configurations.archives
}

bintray {
    user = bintrayUser
    key = bintrayAPIKey

    configurations = ['archives']
    publish = true

    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = "xendit"
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = bintrayGPGPassword
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

apply plugin: 'java'
apply plugin: 'com.diffplug.gradle.spotless'

spotless {
    java {
        googleJavaFormat()
    }
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/jar/xendit-java-release.jar") // replace with your library name
            groupId this.group
            artifactId 'xendit-java' // replace with your library artifact id
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }

             pom.project {
                name bintrayName
                packaging 'jar'
                // optionally artifactId can be defined here
                description libraryDescription
                url siteUrl

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url gitUrl
                }

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
            }
        }
    }
}

nexusStaging {
    serverUrl = 'https://s01.oss.sonatype.org/service/local/'
    username = ossrhUser
    password = ossrhPassword
    repositoryDescription = 'Closed and released using gradle script'
    packageGroup = this.group
}
